#!/bin/bash
## title          :diary
## description    :Script to manage diary annotations of different projects
##                 or personal notes. It allows to search sentences in all the
##                 diaries, visualize in a web-browser, and maintain a control
##                 version.
## author         :Miquel Perello Nieto
## date           :20170221
## version        :0.6
## usage          :diary nameofthediary
## notes          :Install Vim or modify the text editor
## bash_version   :4.1.5(1)-release

version="diary 0.6
Copyright (C) 2015
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Miquel Perello Nieto."

usage="Usage: $0 [OPTION]... [DIARY_NAME]
Opens todays page of the DIARY_NAME diary or performs any of the specified
options.

    OPTIONs

     -h, --help       Show the help
     -v, --version    Show the actual version information
     -ls              Show the name of all the diaries
     -lsl             List the name of all the diaries
     -lt              List available templates
     -e, --explore    Open a web-browser with the content of the specified diary
     -s, --search     Searches the following sentence in the specified diary
                      (or in all the diaries if the diary name is ommited)
     -y, --year       all or year (default current year)
     --last           Number of pages from the end
     -t, --todo       Show all the TODO tags
     -m, --template   Appends a template to the current day
     -push            Push all the changes to a repository
     -pull            Pull all the changes from a repository

Report bugs to <bugs-diary@perellonieto.com>."

# TODO add Jekyll support

#=============================
# CONFIGURATION VARIABLES
#
DIARY_PATH="${HOME}/Dropbox/diary"
EDITOR="vim + "
# EDITOR="remarkable"
EXPLORER="sensible-browser"

ADD="git add *"
COMMIT="git commit"
PULL="git pull"
PUSH="git push"

FORMAT=`date +"%Y_%m_%d"`
VALID_PROJECT_NAME='^0-9a-zA-Z+$'
EXTENSION="markdown"
TEMP_FILE="._tmp_file_markdown.html"
CSS_STYLE="style.css"
MDTOHTML="pandoc --filter ${HOME}/bin/graphviz.py --smart --mathjax --highlight-style pygments --columns=200"
YEAR=`date +%Y`
LAST="all"

NOTEBOOK=''
TEMPLATE=''

read -r -d '' HTML_HEAD <<-'EOF'
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//E " "http://www.w3.org/TR/html4/strict.dt ">
<html>
<head>
    <title>Diary</title>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">

    <link rel="stylesheet" type="text/css" href="../_html/style.css">
    <script src="../_html/jquery-3.1.1.min.js"></script>
    <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [['$','$'], ['\\(','\\)']],
        processEscapes: true
    }
    });
    </script>
    <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
    <script type="text/javascript" async src="../_html/functions.js">
    </script>
</head>
<body>

<nav role="navigation" class="table-of-contents" onmouseenter="showToC();" onmouseleave="hideToC();">
  <h2>Table of Contents:</h2>
  <ul>
  </ul>
</nav>
EOF

# With an internet connection is possible to use the mathjax library online.
# Just substitute the upper line for this one
#    <script type="text/javascript" async src="../_html/MathJax.js?config=TeX-MML-AM_CHTML">
#   <script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">

read -r -d '' HTML_FOOTER <<-'EOF'
</body>
</html>
EOF

#=============================
# AUXILIAR FUNCTIONS
#

# TODO: find correct regular expresion
# for some reason I do not get + and ? to work
function validate_project_name() {
    if [[ $1 =~ [$VALID_PROJECT_NAME] ]]; then
        return 1
    elif [[ $1 == '' ]]; then
        return 1
    fi
    return 0
}

function explore() {
    diary=$1
    YEAR=$2
    LAST=$3
    cd ${diary}
    rm ${TEMP_FILE}
    echo "${HTML_HEAD}" > ${TEMP_FILE}

    if [ "$LAST" != "all" ]; then
        FILENAME_LIST=`ls -r ./*.${EXTENSION} | head "-${LAST}"`
    elif [ "$YEAR" == "all" ]; then
        FILENAME_LIST=`ls -r ./*.${EXTENSION}`
    else
        FILENAME_LIST=`ls -r ./*.${EXTENSION} | grep ${YEAR}`
    fi

    echo "<h1 id=\"TODOs\">TODOs</h1>" >> "$TEMP_FILE"
    # If filename list only contains one file, grep will not print the filename
    # before the line. To solve that it is enough to add an additional file
    # /dev/null that makes it believe there are multiple files
    grep "\[ \] \*\*TODO\*\*" ${FILENAME_LIST} /dev/null | \
         awk -F':' '{print $2, "[#](#"$1")";}' | \
         $MDTOHTML >> ${TEMP_FILE}
    #cp "../_html/$CSS_STYLE" $TEMP_FILE


    for FILENAME in $FILENAME_LIST
    do
        echo "Extracting file $FILENAME"
        H1TITLE=$(basename $FILENAME)
        H1TITLE="${H1TITLE%.*}"
        echo "<a name=\"${FILENAME}\"><h1 class='filename' id=\"${H1TITLE}\">${H1TITLE}</h1> </a>" >> ${TEMP_FILE}
        $MDTOHTML $FILENAME >> ${TEMP_FILE}
    done

    echo "${HTML_FOOTER}" >> ${TEMP_FILE}
    # TODO look into pandoc
    #pandoc --to='html5' --output="$TEMP_FILE" $FILENAME
    # TODO solve problem ? is changed by %3F
    #TEMP_FILE=`pwd`"/${TEMP_FILE}?refresh=5"
    #echo ${TEMP_FILE}
    #$EXPLORER ${TEMP_FILE}
}

function echo_todos() {
    grep "\[ \] \*\*TODO\*\*" `find ./${NOTEBOOK} -type f -name *.${EXTENSION} | sort `

}

#=============================
# MAIN
#

# First time using diary
if ! [ -d "${DIARY_PATH}" ]; then
    mkdir "${DIARY_PATH}"
fi

# Go to diaries path
cd ${DIARY_PATH}

while [[ $# -gt 0 ]]; do
    opt="$1"
    shift
    case "$opt" in
    -h|-\?|--help) printf '%s\n' "${usage}" || exit 2; exit;;
    -v|--version) printf '%s\n' "$version" || exit 2; exit;;
    -ls) ls | grep -v ^_ || exit 2; exit;;
    -lsl) ls | grep -v ^_ || exit 2; exit;;
    -lt) ls _templates/ | sed -e 's/.${EXTENSION}//g' || exit 2; exit;;
    -s|--search) search_sentence=$1; shift;;
    -e|--explore) NOTEBOOK=$1; shift;;
    -y|--year) YEAR=$1; shift;;
    --last) LAST=$1; shift;;
    -t|--todo) NOTEBOOK=$1; echo_todos; exit;;
    -m|--template) TEMPLATE=$1; shift;;
    -pull) $PULL || exit 2; exit;;
    -push) $ADD; $COMMIT; $PUSH; exit;;
    *)
      if [[ $# -eq 0 ]]; then
          diary=${opt}
      else
          printf '%s\n' "${usage}" || exit 2; exit;
      fi
      ;;
    esac
done

if ! [[ -z "$NOTEBOOK" ]]; then
    explore $NOTEBOOK $YEAR $LAST
    $EXPLORER ${TEMP_FILE} &
    exit 2; exit;
fi


if ! [[ -z "$search_sentence" ]]; then
    if ! validate_project_name $diary; then
        grep --color=auto -r "${search_sentence}" ./*/*.${EXTENSION}
    else
        grep --color=auto -r "${search_sentence}" ${diary}/*.${EXTENSION}
    fi
    exit 0
fi

if ! validate_project_name $diary; then
    echo "Project name can only contain :${VALID_PROJECT_NAME}"
    exit 0
fi

# If the diary is new, create it
if ! [ -d "$diary" ]; then
    mkdir "${diary}"
fi

cd $diary

#if [[ -z "$DAY" ]]; then
#    FORMAT=$DAY
#fi

FILENAME=${diary}\_${FORMAT}.${EXTENSION}

if ! [[ -z "$TEMPLATE" ]]; then
    TEMPLATE_FILE="../_templates/$TEMPLATE.${EXTENSION}"
    if [ -f "$TEMPLATE_FILE" ]; then
        DATETIME=`date +"%H:%M, %A %B %d, %Y"`
        cat "../_templates/$TEMPLATE.${EXTENSION}" | \
            sed -e "s/{DATETIME}/${DATETIME}/g" >> $FILENAME
    else
        echo "Template $TEMPLATE does not exist. Choose one of the following:"
        ls "../_templates/" | sed 's/.${EXTENSION}//'
        exit 2; exit;
    fi
fi

${EDITOR} ${FILENAME}
